// Tarjan

// u[],v[] 有向边集合
// tms: dfs时间戳
// scc:缩点后点的数量
// belong数组的值是1~scc
// dfn[]: 每个点访问的时间戳
// low[]: 确定强联通的祖先
// vector<int>dag[]: 缩点后的新图

const int maxn = 10007;
const int maxm = 50007;

int head[maxn], nxt[maxm], to[maxm], tot;
int u[maxm], v[maxm];
int dfn[maxn], low[maxn], belong[maxn], scc, tms;
vector<int>dag[maxn];
stack<int>st;
bool vis[maxn], ins[maxn];
int n,  m;


void addedge(int u,int v)
{
    to[++tot]=v;
    nxt[tot]=head[u];
    head[u]=tot;
}

void tarjan(int u)
{
   dfn[u]=low[u]=++tms;
   st.push(u); ins[u]=1;
   for(int i=head[u]; i; i=nxt[i])
   {
       int v=to[i];
       if(!dfn[v])
       {
           tarjan(v);
           low[u]=min(low[u], low[v]);
       }
       else if(ins[v]){
        low[u]=min(low[u], dfn[v]);
       }
   }
   if(dfn[u] == low[u]){
      belong[u]=++scc;
      int y;
      do{
        y=st.top();
        st.pop();
        ins[y]=0;
        belong[y]=scc;
      }while(u!=y);
   }
}

int suodian()
{
    for(int i=1; i<=m; i++)
    {
        if(belong[u[i]] == belong[v[i]])
            continue;
        dag[belong[u[i]]].push_back(belong[v[i]]); //可能两个强联通之间有多条边
    }
    int cnt=0, id=0;
    for(int i=1; i<=scc; i++)
    {
        if(dag[i].size() == 0)
        {
            cnt++;
            for(int j=1; j<=n; j++){
                if(belong[j] == i)
                    id++;
            }
        }
    }
    if(cnt==1)
        return id;
    else
        return 0;
}

void solve()
{
    for(int i=1; i<=n; i++)
    {
        if(!dfn[i])
            tarjan(i);
    }
}

int main()
{
    scanf("%d%d", &n, &m);
    for(int i=1; i<=m; i++)
    {
        scanf("%d%d", &u[i], &v[i]);
        addedge(u[i], v[i]);
    }
    solve();
    printf("%d\n", suodian());
    return 0;
}
